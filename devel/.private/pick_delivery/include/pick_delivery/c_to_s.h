// Generated by gencpp from file pick_delivery/c_to_s.msg
// DO NOT EDIT!


#ifndef PICK_DELIVERY_MESSAGE_C_TO_S_H
#define PICK_DELIVERY_MESSAGE_C_TO_S_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pick_delivery
{
template <class ContainerAllocator>
struct c_to_s_
{
  typedef c_to_s_<ContainerAllocator> Type;

  c_to_s_()
    : resp(0)
    , idrob(0)  {
    }
  c_to_s_(const ContainerAllocator& _alloc)
    : resp(0)
    , idrob(0)  {
  (void)_alloc;
    }



   typedef int64_t _resp_type;
  _resp_type resp;

   typedef int64_t _idrob_type;
  _idrob_type idrob;





  typedef boost::shared_ptr< ::pick_delivery::c_to_s_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pick_delivery::c_to_s_<ContainerAllocator> const> ConstPtr;

}; // struct c_to_s_

typedef ::pick_delivery::c_to_s_<std::allocator<void> > c_to_s;

typedef boost::shared_ptr< ::pick_delivery::c_to_s > c_to_sPtr;
typedef boost::shared_ptr< ::pick_delivery::c_to_s const> c_to_sConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pick_delivery::c_to_s_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pick_delivery::c_to_s_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pick_delivery::c_to_s_<ContainerAllocator1> & lhs, const ::pick_delivery::c_to_s_<ContainerAllocator2> & rhs)
{
  return lhs.resp == rhs.resp &&
    lhs.idrob == rhs.idrob;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pick_delivery::c_to_s_<ContainerAllocator1> & lhs, const ::pick_delivery::c_to_s_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pick_delivery

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pick_delivery::c_to_s_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pick_delivery::c_to_s_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pick_delivery::c_to_s_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pick_delivery::c_to_s_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pick_delivery::c_to_s_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pick_delivery::c_to_s_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pick_delivery::c_to_s_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e9e9ddd2ccd7a9c901bb09b4fb8d85be";
  }

  static const char* value(const ::pick_delivery::c_to_s_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe9e9ddd2ccd7a9c9ULL;
  static const uint64_t static_value2 = 0x01bb09b4fb8d85beULL;
};

template<class ContainerAllocator>
struct DataType< ::pick_delivery::c_to_s_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pick_delivery/c_to_s";
  }

  static const char* value(const ::pick_delivery::c_to_s_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pick_delivery::c_to_s_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 resp\n"
"int64 idrob\n"
;
  }

  static const char* value(const ::pick_delivery::c_to_s_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pick_delivery::c_to_s_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.resp);
      stream.next(m.idrob);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct c_to_s_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pick_delivery::c_to_s_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pick_delivery::c_to_s_<ContainerAllocator>& v)
  {
    s << indent << "resp: ";
    Printer<int64_t>::stream(s, indent + "  ", v.resp);
    s << indent << "idrob: ";
    Printer<int64_t>::stream(s, indent + "  ", v.idrob);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PICK_DELIVERY_MESSAGE_C_TO_S_H
